#!/bin/bash
# vim: ft=config ts=2 sw=2 sts=2 et

# vpm - void package management utility for

# XBPS, the X Binary Package System
# Copyright (c) 2016 Armin Jenewein <a@m2m.pm>

getversion () {
  cd "${0%/*}"
  git describe --all --debug --long --tags 2>/dev/null || echo "UNKNOWN"
}

version="$(getversion)"

# set to "false" to permanently disable colors
color=true

case "$1" in
  "--color=false")
  color=false
  shift
  ;;
  "--color=true")
	  color=true
  shift
  ;;
esac

color () {
if [[ $color == true ]]; then
  case "$1" in
    [0-9]*)
      tput setaf "$1"
    ;;
    reset)
      tput sgr0
    ;;
    *)
      tput "$@"
    ;;
  esac
fi

}

msg () {
  color 110
  echo -n "["
  color 214
  echo -n "vpm"
  color 110
  echo -n "] "
  echo "$@"
  color sgr0
}

if [[ "$UID" -gt 0 ]]; then
  msg "ERROR: ${0##*/} needs super-user privileges. Exiting."
  exit 255
fi


banner () {
  banner_fg=111
  banner_bg=142
  tput setaf $banner_fg
  echo  ' __ ___ __ _ __  '
  echo -n " \ V / '_ \ '  \ "
  tput setaf $banner_bg
  echo '  vpm - void package management utility'
  tput setaf $banner_fg
  echo -n '  \_/| .__/_|_|_|'
  tput setaf $banner_bg
  echo '  GitHub: https://github.com/netzverweigerer/vpm'
  tput setaf $banner_fg
  echo -n '     |/          '
  tput sgr0
}

version () {
  color 107
  banner
  echo
  color sgr0
  msg "vpm - Version: $version"
  msg "Copyright (c) 2016 Armin Jenewein <a@m2m.pm>"
  msg "XBPS version: $(xbps-query -v --version)"
}

# extract versionstring appendix from given package name
extract_versionstring () {
  echo "$1" | rev | cut -d"-" -f 1 | rev
}

# extract versionstring appendix from given package name
extract_packagename () {
  echo "$1" | rev | cut -d"-" -f 2- | rev
}

usage () {
  echo
  version
  echo
  color 66
  echo
  echo "USAGE: "
  color 101
  echo
  echo "vpm [OPTIONS] [SUBCMD] [<OPTIONS>] [<args>]"
  echo 
  color 66
  echo
  echo "OPTIONS: "
  color 101
  echo
  echo "--color=<true/false>         - Enable/Disable colorized output"
  echo "--help                       - (same as: help)"
  echo
  color 66
  echo
  echo -n "SUBCOMMANDS: "
  echo "(feel free to prefix them with --, vpm doesn't care.)"
  echo
  color 109
  echo "sync                         - Synchronize remote repository data"
  echo "update                       - Update the system"
  echo "repolist                     - List configured repositories"
  echo "listrepos                    - (same as: repolist)"
  echo "addrepo                      - Add an additional repository"
  echo "info <package>               - Show information about <package>"
  echo "filelist <package>           - Show file-list of <package>"
  echo "deps <package>               - Show dependendies of <package>"
  echo "reverse <package>            - Show reverse dependendies of <package>"
  echo "search <name>                - Search for package by <name>"
  echo "searchfile <file>            - Search for package containing <file>"
  echo "list                         - List installed packages"
  echo "install <package>            - Install <package>"
  echo "listalternatives             - List alternative candiates"
  echo "setalternative <package>     - Set alternative for <package>"
  echo "reconfigure <package>        - Re-configure installed <package>"
  echo "forceinstall <package>       - Force installation of <package>"
  echo "remove <package)             - Remove <package>"
  echo "removerecursive <package>    - Recursively remove package (and its dependencies)"
  echo "cleanup                      - Clean up cache directory"
  echo "autoremove                   - Remove orphaned packages"
  echo "help                         - Show usage information"
  echo
  color 66
  echo
  echo "XBPS COMPATIBILITY:"
  color 103
  f=(/usr/sbin/xbps-*)
  echo
  echo "vpm also understands xbps commands:"
  echo -n "Example: "
  selected=${f[$RANDOM % ${#f[@]}]}
  echo "${0##*/} ${selected##*-} <ARGS>"
  echo
  echo "(see /usr/sbin/xbps-*)"
  echo 
}


if [[ "$1" == "" ]]; then
  usage
  exit 0
fi

arg="$1"

if [[ "$arg" =~ --.* ]]; then
b="${arg:2}"
arg="$b"
fi

case "$arg" in
  info)
    shift
    msg "(xbps-query -v -R $@):"
    xbps-query -v -R "$@"
    ret=$?; msg "Execution finished (xbps-query -v -R $@), return code was: $ret"
    exit $ret
  ;;

  filelist)
    shift
    xbps-query -v -R -f "$@"
    ret=$?; msg "Execution finished (xbps-query -v -R -f \"*/$1\"), return code was: $ret"
    exit $ret
  ;;

  deps|dependencies)
    shift
    xbps-query -v -R -x "$@"
    ret=$?; msg "Execution finished (xbps-query -v -R -x \"*/$1\"), return code was: $ret"
    exit $ret
  ;;

  reverse)
    shift
    msg "Reverse dependencies for $@ (xbps-query -v -R $@):"
    xbps-query -v -R -X "$@"
    ret=$?; msg "Execution finished (xbps-query -v -R $@), return code was: $ret"
    exit $ret
  ;;

  searchfile)
    shift
    msg "searchfile: This might take a long time, please be patient..."
    msg "(xbps-query -v -R -o \"*/$1\"):"
    sleep 1
    xbps-query -v -R -o "*/$1"
    ret=$?; msg "Execution finished (xbps-query -v -R -o \"*/$1\"), return code was: $ret"
    exit $ret
  ;;

  list)
    shift
    msg "Installed packages: "
    count=0
    xbps-query -v -l | while read line; do
    let count=count+1
    pkgname="$(echo "$line" | cut -d" " -f 2 | xargs -0)"
    version="$(extract_versionstring "$pkgname")"
    pkg="$(extract_packagename "$pkgname")"
    tput setaf 32
    echo -e -n "($count) ${pkg} "
    tput setaf 244
    echo -e -n " [${version}] "
    tput setaf 241
    echo " [${pkgname}] "
    shift
    done
  ;;

  listalternative|listalternatives)
  xbps-alternatives -l "$@"
  ;;

  setalternative|setalternatives)
  shift
  xbps-alternatives -s "$@"
  ;;

  repolist|listrepos)
    msg "Configured repositories (xbps-query -v -L): "
    xbps-query -v -L
    shift
    echo
    msg "Available sub-repositories (xbps-query -v -Rs void-repo): "
    xbps-query -v -Rs void-repo
    msg "[xbps-query -v -Rs void-repo] return code: $?"
    shift
    echo
    msg "Use \"${0##*/} addrepo <repository>\" to add a sub-repository."
    echo
  ;;

  addrepo)
    shift
    while [ "$#" -gt 0 ]; do
    msg "Adding repository: $1"
    xbps-install "$1"
    msg "[xbps-install $arg] return code: $?"
    msg "Synchronizing remote repository data (xbps-install -S): "
    xbps-install -S
    msg "[xbps-install -S] return code: $?"
    shift
    done
    ;;
  sync)
    msg "Synchronizing remote repository data: (xbps-install -S):"
    xbps-install -S
    msg "[xbps-install -S] return code: $?"
  ;;

  install)
  shift
  if [ "$#" -lt 1 ]; then
    msg "ERROR: install: argument missing"
    usage
    exit 1
  fi
  args=($@)
  count=0
  msg "Packages will be installed one-by-one"
  msg "Use \"forceinstall\" to override this if you know what you're doing."
  for arg in "${args[@]}"; do
  let count=count+1
  msg "Installing packages: ($count/${#args[@]}): $arg (xbps-install -S $arg) ..."
  xbps-install -S "$arg"
  ret="$?"
  msg "[xbps-install -S $arg] return code: $ret"
  done
  ;;

  forceinstall)
  shift
  msg "Force-Installing Package(s): $@ (xbps-install -Sf $@)"
  xbps-install -Sf "$@"
  ;;

  remove)
  shift
  msg "Removing package(s): $@ (xbps-remove -v $@)"
  xbps-remove -v "$@"
  ;;

  removerecursive)
  shift
  msg "Removing package(s) recursively: $@ (xbps-remove -v -R $@)"
  xbps-remove -v -R "$@"
  ;;

  reconfigure)
  shift
  msg "reconfigure: Re-configuring package(s) (xbps-reconfigure -v $@):"
  xbps-reconfigure -v "$@"
  ;; 

  autoremove)
  shift
  msg "autoremove: Removing orphaned packages (xbps-remove -v -Q)"
  xbps-remove -v -O
  msg "done."
  ;;

  update)
  shift
  msg "Running system update (xbps-install -Sduv)"
  xbps-install -Sduv
  msg "[xbps-install -Sduv] return code: $?"
  ;;

  search)
  shift
  msg "Searching for: $@ (xbps-query -v -Rs $@)"
  xbps-query -v -Rs "$@"
  msg "[xbps-query -v -Rs $@] return code: $?"
  ;;

  cleanup)
  msg "Cleaning up packages (will remove orphaned packages) (xbps-remove -v -O $@)"
  shift
  xbps-remove -v -O "$@"
  msg "[xbps-remove -v --D $@] return code: $?"
  ;;

  help|-h|--help)
  usage
  ;;

  ''|*)
  a="$1"
  if hash "xbps-${a}" >/dev/null 2>&1; then
    shift
    # xbps-<subcommand> found
    msg "relaying to XBPS: xbps-${a} $@"
    xbps-${a} $@
  else
    msg "Unrecognized vpm subcommand: $1 (and xbps-$1 does not exist) - Try: ${0##*/} help"
    echo
    exit 1
  fi
  ;;

esac

exit 0


