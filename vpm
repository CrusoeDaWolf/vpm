#!/bin/bash

# vpm - void package management utility for
# XBPS, the X Binary Package System

# Copyright (c) 2016 Armin Jenewein <a@m2m.pm>

version="0.3"

version () {
  tput setaf 67
  cat <<EOF
 __ ___ __ _ __  
 \ V / '_ \ '  \ 
  \_/| .__/_|_|_|
     |_|         
EOF
  echo
  tput sgr0
  echo "[vpm $version]"
  echo
  echo "XBPS version: $(xbps-query --version)"
}

msg () {
  tput setaf 67
  echo "[vpm] $@"
  tput setaf 10
}

# extract versionstring appendix from given package name
extract_versionstring () {
  echo "$1" | rev | cut -d"-" -f 1 | rev
}

usage () {
  echo
  version
  echo
  echo "USAGE: vpm <OPTIONS> [<args>]"
  echo
  echo "OPTIONS: "
  echo
  echo "sync                         - Synchronize remote repository data"
  echo "update                       - Update the system"
  echo "repolist                     - list configured repositories"
  echo
  echo "info <package(s)>            - Show information about package"
  echo "filelist <package(s)>        - Show file-list of package"
  echo "dependencies <package(s)>    - Show dependendies of package"
  echo "reverse <package(s)>         - Show reverse dependendies of package"
  echo
  echo "search <name>                - Search for package(s) by name/description"
  echo "searchfile <file>            - Search for package containing <file>"
  echo
  echo "list                         - List installed packages"
  echo "install <package(s)>         - Install <package(s)>"
  echo "forceinstall <package(s)>    - Force installation of <package(s)>"
  echo "remove <package(s)           - Remove <package(s)"
  echo
  echo "cleanup                      - Clean up cache directory"
  echo "autoremove                   - Remove orphaned packages"
  echo "help                         - Show usage information"
  echo
}


if [[ "$1" == "" ]]; then
  usage
  exit 0
fi

case "$1" in
  info)
    shift
    xbps-query -R "$@"
  ;;

  filelist)
    shift
    xbps-query -R -f "$@"
  ;;

  dependencies)
    shift
    xbps-query -R -x "$@"
  ;;

  reverse)
    shift
    xbps-query -R -X "$@"
  ;;

  searchfile)
    shift
    msg "searchfile: This might take a long time, please be patient..."
    sleep 1
    xbps-query -R -o "*/$1"
  ;;

  list)
    shift
    xbps-query -l | while read line; do
    pkgname="$(echo "$line" | cut -d" " -f 2 | xargs -0)"
    version="$(extract_versionstring "$pkgname")"
    echo
    echo "Package name: $pkgname"
    echo "Version: $version"
    done
    echo
    shift
  ;;

  sync)
    msg "Synchronizing remote repository data: (xbps-install -S):"
    xbps-install -S
    msg "done."
  ;;

  install)
  shift
  if [ "$#" -lt 1 ]; then
    usage
    exit 1
  fi
  args=($@)
  count=0
  for arg in "${args[@]}"; do
  let count=count+1
  msg "Installing ($count/${#args[@]}): $arg (xbps-install -S $arg) ..."
  xbps-install -S "$arg"
  msg "done."
  done
  ;;

  forceinstall)
  shift
  msg "Force-Installing Package(s): $@ (xbps-install -Sf $@)"
  xbps-install -Sf "$@"
  ;;

  remove)
  shift
  msg "Removing package(s): $@ (xbps-remove $@)"
  xbps-remove "$@"
  ;;

  autoremove)
  shift
  msg "autoremove: Removing orphaned packages (xbps-remove -Q)"
  xbps-remove -O
  msg "done."
  ;;

  update)
  shift
  msg "Running system update (xbps-install -Sduv)"
  xbps-install -Suv
  msg "done."
  ;;

  search)
  shift
  msg "Searching for: $@ (xbps-query -Rs $@)"
  xbps-query -Rs "$@"
  ;;

  cleanup)
  msg "Cleaning up packages (will remove orphaned packages) (xbps-remove -O $@)"
  shift
  xbps-remove -O "$@"
  ;;

  help|-h|--help)
  usage
  ;;

  ''|*)
  a="$1"
  if hash "xbps-${a}" >/dev/null 2>&1; then
    # xbps-<subcommand> found
    msg "(relaying to XBPS): xbps-${a} $@"
    xbps-${a} $@
  else
    msg "Unrecognized subcommand: $1 - try: $0 help"
    echo
    exit 1
  fi
  ;;

esac

exit 0

